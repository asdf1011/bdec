# A list of tests that still need to be fixed. These tests are explicitly
# skipped to avoid the overall tests failing.
#
# Each section is the name of a language / template, and each key is the name
# of a file without the extension (eg: xml/005_choice_hidden_child). The value
# should be;
#  * 'decoding-broken' to skip the test entirely for this language
#  * 'encoding-broken' if only the encoding portion of the test is to be skipped.
#  * 'encoding-equivalent' if the encoding succeeds, but generates different
#     binary data.

[default]
# These tests have hidden fields that were not null, but are after re-encoding.
xml/025_hidden_sequence=encoding-equivalent
xml/027_hidden_sequence_with_visible_children=encoding-equivalent
xml/028_hidden_sequenceof=encoding-equivalent
xml/067_variable_64_bit_integer=encoding-equivalent
xml/082_visible_sequenceof_with_hidden_children=encoding-equivalent
xml/083_variable_length_with_expected_value=encoding-equivalent

# We encode the variable length integer to a different representation
xml/064_signed_variable_length_integer=encoding-equivalent

# In this test the 'extra data' is being hidden due to the 'expected'
# constraint on the reference... perhaps this should be made an error?
xml/094_mock_sequence_with_value=encoding-equivalent
# The optional whitespace is removed on re-encoding.
xml/107_hidden_sequenceof=encoding-equivalent

# Encoding still broken (it encodes, but produces the wrong result)
asn1/04_choice=encoding-broken

# We currently encode to indefinite format by default; the files are encoded in
# definite format.
asn1/01_sequence=encoding-equivalent
asn1/02_version=encoding-equivalent
asn1/03_enumeration=encoding-equivalent


[Python]
# The python decoder doesn't differentiate between duplicate names. This is
# reasonable; the spec should be better in these cases.
xml/011_duplicate_name_to_same_instance=encoding-broken
xml/013_duplicate_names_in_choice=encoding-broken
xml/014_duplicate_names_in_sequence=encoding-broken

# The choice has no visible options, so on re-encoding the first one is chosen,
# which is different from the source file.
xml/024_hidden_choice=encoding-equivalent

# The invalid character cannot be represented in xml, so the '?' is used on
# re-encoding.
xml/033_invalid_characters_in_string=encoding-broken

# These are broken as encoding doesn't work for the python encoder when a
# sequence with a value has visible children (see issue 251).
xml/058_sequence_expected_value=encoding-broken
xml/074_sequence_with_min_and_max=encoding-broken
xml/094_mock_sequence_with_value=encoding-broken
xml/098_solve_during_mock=encoding-broken
xml/101_multi_mock_solve=encoding-broken

xml/099_solve_higher_mock_entry=encoding-broken
# Encoding variable length null fields is broken
xml/100_null_mocked_fields=encoding-broken
# Encoding is broken for python for sequenceof entries, as the final null entry
# entry isn't encoded.
xml/109_empty_sequenceof_with_hidden_end=encoding-broken

[C,Cpp,C89,VisualC]
xml/077_nasty_choice=encoding-broken
# The 88 test requires correctly populating a mock instance (evaluating the
# expressions to calculate derived values).
xml/088_hidden_sequence_with_value=encoding-broken
# The solver doesn't detect solving entries that are higher up the tree, but
# still hidden...
xml/099_solve_higher_mock_entry=encoding-broken
# Memory leaks when attempting to decode
xml/100_null_mocked_fields=decoding-broken
