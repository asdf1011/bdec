
----
bdec
----

'bdec', tools for decoding binary files.

.. contents::

Manually writing decoders for binary formats is a time consuming, frustrating,
and costly process; it is also the source of many bugs.

Using bdec, developers can write specifications for binary formats using
simple low-level constructs that combine in powerful ways, allowing many binary
formats to be partially (and often fully) specified. From this specification,
bdec will generate source code for decoders and encoders.

While other high level specification languages exist (such as ASN.1_, or
`Google protocol buffers`_), few existing formats make use of these languages,
and such specification languages cannot usually be retro-fitted to existing
binary formats.

With bdec;

 * Easily write and maintain specifications.
 * Generate portable, readable, and efficient C decoders and encoders.
 * Run under Windows and Unix operating systems.
 * Clear and extensive documentation_.

.. _ASN.1: http://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One


Getting started
===============

1. Download_ the latest version.
2. Go through the tutorial_.
3. Try writing a specification for your own file formats, referring to the
   documentation_ where necessary (`pdf documentation`_ is also available).

.. _documentation: docs/
.. _tutorial: docs/tutorial.html
.. _pdf documentation: files/bdec-VERSION.pdf


Download
========

The easiest way to install bdec is to use python's easy_install_ application.
Run::

  easy_install bdec

to install the latest version of the bdec decoder and compiler.
See the CHANGELOG_ for past releases.

.. _CHANGELOG: changelog.html
.. _easy_install: http://pypi.python.org/pypi/setuptools#installation-instructions


Support
=======

Any comments or questions can go to the group mailing list at
`bdec-project@yahoogroups.com`_. This is a moderated list, so please be
patient if your question doesn't show up immediately.

.. _bdec-project@yahoogroups.com: mailto:bdec-project@yahoogroups.com


Features
========

* Clear and extensive documentation_.
* It is easy to write (and read) bdec specifications.
* Generated source code is human readable, easy to use, has no dependencies,
  and compiles without warnings using Gcc_ and `Microsoft Visual Studio`_.
* The command line application allows iterative development and visual
  inspection of problematic files (eg: `xml representation of a fat
  bootsector`_).

.. _xml representation of a FAT bootsector: docs/files/fatbootsector.xml
.. _gcc: http://gcc.gnu.org/
.. _Microsoft Visual Studio: http://www.microsoft.com/visualstudio/


License
=======

The bdec library and code generated by the specification compiler are made
available under the `GNU Lesser General Public License (LGPL)`_. In summary,
this means;

 * The software can be used free of charge in any application (including
   closed source applications).
 * If you distribute an application using either the bdec library or code
   generated by the bdec library, the binary containing this code must be
   dynamically linked (eg: .dll in Windows, .so in Linux).
 * The source code to this dynamic library must be made available to anyone
   you distribute the library to.

See COPYRIGHT_ and LICENSE_ for detailed copyright information.

.. _GNU Lesser General Public License (LGPL): http://www.gnu.org/licenses/lgpl.txt
.. _COPYRIGHT: docs/files/COPYRIGHT
.. _LICENSE: docs/files/LICENSE


Source
======

The source control tree is available on github at
http://github.com/asdf1011/bdec.

  git clone http://github.com/asdf1011/bdec.git

Dependencies that must be installed are pyparsing_ and mako_.

.. _pyparsing: http://pyparsing.wikispaces.com/
.. _mako: http://www.makotemplates.org/


Similar projects
================

Some other tools that perform 'generic' binary decoding include;

* TSN.1_ - Commercial product with very similar decoding functionality to bdec.
  Can create C, C++, and Java decoders and encoders.
* Encodix_ - Commercial product focussed on decoders for the
  telecommunications industry.
* Hachoir_ - Tool for inspecting many binary formats.

Projects that generate decoders from high level specifications;

* Asn1c_ Asn.1 compiler; generates C language encoders and decoders.
* `Google protocol buffers`_ - Define data interchange formats in an easy to
  read specification, and compile them to Java, C++, or Python decoders and
  encoders.

.. _TSN.1: http://www.protomatics.com/tsn1.html
.. _Hachoir: http://hachoir.org/
.. _Encodix: http://www.dafocus.com/
.. _Asn1c: http://lionet.info/asn1c/
.. _Google protocol buffers: http://code.google.com/apis/protocolbuffers/
